name: CI/CD Demo

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/cicd.yml
      - src/**
      - tests/**
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/cicd.yml
      - src/**
      - tests/**

env:
  JOBS_ARTIFACT_NAME: jobs-${{ github.run_id }}
  CLIENT_ARTIFACT_NAME: client-${{ github.run_id }}

jobs:
  # Build, test and publish API job
  build:
    name: Build and test
    runs-on: ubuntu-latest
    env:
      BUILD_CONFIGURATION: Release
      JOBS_PUBLISH_DIRECTORY: ${{ github.workspace }}/artifacts/jobs
      CLIENT_PUBLISH_DIRECTORY: ${{ github.workspace }}/artifacts/client
      TEST_RESULTS_DIRECTORY: ${{ github.workspace }}/artifacts/test-results
    permissions:
      checks: write
      pull-requests: write
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install .NET workloads
      - name: Install .NET workloads
        run: dotnet workload install aspire wasm-tools

      # Restore NuGet packages
      - name: Restore packages
        run: dotnet restore

      # Build solution
      - name: Build solution
        run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

      # Run tests
      - name: Run tests
        run: >-
          dotnet test
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --logger trx
          --collect "XPlat Code Coverage"
          --settings coverlet.runsettings
          --results-directory ${{ env.TEST_RESULTS_DIRECTORY }}

      # Publish test results
      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: ${{ env.TEST_RESULTS_DIRECTORY }}/*.trx
          check_name: Solution test results
          action_fail: true

      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ env.TEST_RESULTS_DIRECTORY }}

      # Upload coverage reports
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      # Publish jobs project
      - name: Publish jobs project
        if: github.event_name != 'pull_request'
        run: >-
          dotnet publish src/Adoptrix.Jobs
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --output ${{ env.JOBS_PUBLISH_DIRECTORY }}

      # Publish client project
      - name: Publish client project
        #if: github.event_name != 'pull_request'
        run: >-
          dotnet publish src/Adoptrix.Client
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --output ${{ env.CLIENT_PUBLISH_DIRECTORY }}

      # Upload jobs artifact
      - name: Upload jobs artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.JOBS_ARTIFACT_NAME }}
          path: ${{ env.JOBS_PUBLISH_DIRECTORY }}/*

      # Upload client artifact
      - name: Upload client artifact
        #if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CLIENT_ARTIFACT_NAME }}
          path: ${{ env.CLIENT_PUBLISH_DIRECTORY }}/*

  # Deploy container applications
  deploy_container_apps:
    name: Deploy container applications
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read
    environment: demo
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # Deploy API app
      - name: Deploy API app
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}
          dockerfilePath: Dockerfile.api
          acrName: ${{ vars.ACR_NAME }}
          imageToBuild: ${{ vars.ACR_NAME }}.azurecr.io/adoptrix-api:${{ github.sha }}
          containerAppName: adoptrix-demo-api-ca
          resourceGroup: ${{ vars.AZURE_RESOURCE_GROUP }}

  # Deploy jobs application
  deploy_jobs_app:
    name: Deploy jobs application
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
    environment: demo
    steps:
      # Download artifact
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.JOBS_ARTIFACT_NAME }}

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # Publish application
      - name: Publish application
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ vars.JOBS_APP_NAME }}
          package: ${{ steps.download-artifact.outputs.download-path }}

  # Deploy client application
  deploy_client_app:
    name: Deploy client application
    runs-on: ubuntu-latest
    needs: build
    #if: github.event_name != 'pull_request'
    permissions:
      id-token: write
    environment: demo
    steps:
      # Download artifact
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CLIENT_ARTIFACT_NAME }}

      # Deploy to Azure Static Web App
      - name: Deploy to Azure Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          action: upload
          production_branch: main
          azure_static_web_apps_api_token: ${{ secrets.CLIENT_DEPLOYMENT_TOKEN }}
          app_location: ${{ steps.download-artifact.outputs.download-path }}/wwwroot
          skip_app_build: true
          skip_api_build: true
