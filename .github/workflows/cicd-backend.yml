name: CI/CD Backend

on:
  push:
    branches:
      - main
      - feature/container-apps-deploy-refactor
    paths:
      - backend/**
      - deploy/infra/**
      - .github/workflows/cicd-backend.yml
  pull_request:
    branches:
      - main
    paths:
      - backend/**
      - deploy/infra/**
      - .github/workflows/cicd-backend.yml

env:
  API_ARTIFACT_NAME: adoptrix-api-container-image
  JOBS_ARTIFACT_NAME: jobs-published-functions-app

jobs:
  # Build, test and publish API job
  build:
    name: Build and test
    runs-on: ubuntu-latest
    env:
      BACKEND_DIRECTORY: ${{ github.workspace }}/backend
      BUILD_CONFIGURATION: Release
      JOBS_PUBLISH_DIRECTORY: ${{ github.workspace }}/artifacts/jobs
      TEST_RESULTS_DIRECTORY: ${{ github.workspace }}/artifacts/test-results
    permissions:
      checks: write
      pull-requests: write
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Restore NuGet packages
      - name: Restore packages
        run: dotnet restore
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Build solution
      - name: Build solution
        run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Run tests
      - name: Run tests
        run: >-
          dotnet test
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --logger trx
          --collect "XPlat Code Coverage"
          --settings ${{ env.BACKEND_DIRECTORY }}/coverlet.runsettings
          --results-directory ${{ env.TEST_RESULTS_DIRECTORY }}
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Publish test results
      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: ${{ env.TEST_RESULTS_DIRECTORY }}/*.trx
          check_name: Solution test results
          action_fail: true

      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ env.TEST_RESULTS_DIRECTORY }}

      # Upload coverage reports
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      # Publish API project
      - name: Publish API project
        if: github.event_name != 'pull_request'
        run: >-
          dotnet publish
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --output publish
        working-directory: ${{ env.BACKEND_DIRECTORY }}/src/Adoptrix.Api

      # Build and save API image
      - name: Build and save API image
        env:
          IMAGE_TAG: ${{ vars.ACR_NAME }}.azurecr.io/adoptrix-api:${{ github.sha }}
          OUTPUT_PATH: ${{ github.workspace }}/${{ env.API_ARTIFACT_NAME }}.tar
        run: |
          docker build --tag ${{ env.IMAGE_TAG }} .
          docker save --output ${{ env.OUTPUT_PATH }} ${{ env.IMAGE_TAG }}
        working-directory: ${{ env.BACKEND_DIRECTORY }}/src/Adoptrix.Api

      # Upload API artifact
      - name: Upload API artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}
          path: ${{ github.workspace }}/${{ env.API_ARTIFACT_NAME }}.tar

      # Publish jobs project
      - name: Publish jobs project
        if: github.event_name != 'pull_request'
        run: >-
          dotnet publish ${{ env.BACKEND_DIRECTORY }}/src/Adoptrix.Jobs
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --output ${{ env.JOBS_PUBLISH_DIRECTORY }}
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Upload jobs artifact
      - name: Upload jobs artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.JOBS_ARTIFACT_NAME }}
          path: ${{ env.JOBS_PUBLISH_DIRECTORY }}/*

  # Deploy infrastructure job
  deploy_infra:
    name: Deploy infrastructure
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    environment: demo
    permissions:
      id-token: write
      contents: read
    outputs:
      apiAppName: ${{ steps.deploy_bicep.outputs.apiAppName }}
      functionAppName: ${{ steps.deploy_bicep.outputs.functionAppName }}
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # Deploy Bicep template
      - name: Deploy Bicep template
        uses: azure/arm-deploy@v1
        id: deploy_bicep
        env:
          ATTEMPT_ROLE_ASSIGNMENTS: false
          HIVE_IP_ADDRESS: ${{ secrets.HIVE_IP_ADDRESS }}
        with:
          scope: resourcegroup
          resourceGroupName: ${{ vars.AZURE_RESOURCE_GROUP }}
          deploymentName: main-cicd-backend-${{ github.run_number }}
          template: ${{ github.workspace }}/deploy/infra/main.bicep
          parameters: ${{ github.workspace }}/deploy/infra/main.demo.bicepparam

  # Deploy API application job
  deploy_api_app:
    name: Deploy API application
    runs-on: ubuntu-latest
    needs:
      - build
      - deploy_infra
    permissions:
      id-token: write
      contents: read
    environment: demo
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # Build and deploy Container App
      - name: Build and deploy Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}/backend
          dockerfilePath: api.Dockerfile
          imageToBuild: ${{ vars.ACR_NAME }}.azurecr.io/adoptrix-api:${{ github.sha }}
          acrName: ${{ vars.ACR_NAME }}
          containerAppName: ${{ needs.deploy_infra.outputs.apiAppName }}
          resourceGroup: ${{ vars.AZURE_RESOURCE_GROUP }}

  # Deploy jobs application
  deploy_jobs_app:
    name: Deploy jobs application
    runs-on: ubuntu-latest
    needs:
      - build
      - deploy_infra
    environment: demo
    env:
      APP_PATH: ${{ github.workspace }}/app
    steps:
      # Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.JOBS_ARTIFACT_NAME }}
          path: ${{ env.APP_PATH }}

      # Publish application
      - name: Publish application
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.deploy_infra.outputs.functionAppName }}
          package: ${{ env.APP_PATH }}
          publish-profile: ${{ secrets.JOBS_PUBLISH_PROFILE }}
