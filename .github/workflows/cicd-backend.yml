name: CI/CD Backend

on:
  push:
    branches:
      - main
      - feature/azure-functions
    paths:
      - backend/**
      - infra/**
      - .github/workflows/cicd-backend.yml
  pull_request:
    branches:
      - main
    paths:
      - backend/**
      - infra/**
      - .github/workflows/cicd-backend.yml

env:
  API_ARTIFACT_NAME: backend-api
  FUNCTIONS_ARTIFACT_NAME: backend-functions

jobs:
  # Build, test and publish API job
  build:
    name: Build and test
    runs-on: ubuntu-latest
    env:
      BACKEND_DIRECTORY: ${{ github.workspace }}/backend
      BUILD_CONFIGURATION: Release
      API_PUBLISH_DIRECTORY: ${{ github.workspace }}/publish/api
      FUNCTIONS_PUBLISH_DIRECTORY: ${{ github.workspace }}/publish/functions
      TEST_RESULTS_DIRECTORY: ${{ github.workspace }}/test-results
    permissions:
      checks: write
      pull-requests: write
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Restore NuGet packages
      - name: Restore packages
        run: dotnet restore
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Build solution
      - name: Build solution
        run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Run tests
      - name: Run tests
        run: >-
          dotnet test
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --logger trx
          --collect "XPlat Code Coverage"
          --settings ${{ env.BACKEND_DIRECTORY }}/coverlet.runsettings
          --results-directory ${{ env.TEST_RESULTS_DIRECTORY }}
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Publish test results
      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: ${{ env.TEST_RESULTS_DIRECTORY }}/*.trx
          check_name: Solution test results
          action_fail: true

      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ env.TEST_RESULTS_DIRECTORY }}

      # Upload coverage reports
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      # Publish API project
      - name: Publish API project
        if: github.event_name != 'pull_request'
        run: >-
          dotnet publish ${{ env.BACKEND_DIRECTORY }}/src/Adoptrix.Api
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --output ${{ env.API_PUBLISH_DIRECTORY }}
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Upload API artifact
      - name: Upload API artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}
          path: ${{ env.API_PUBLISH_DIRECTORY }}

      # Publish Functions project
      - name: Publish Functions project
        if: github.event_name != 'pull_request'
        run: >-
          dotnet publish ${{ env.BACKEND_DIRECTORY }}/src/Adoptrix.Functions
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --output ${{ env.FUNCTIONS_PUBLISH_DIRECTORY }}
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Upload Functions artifact
      - name: Upload Functions artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FUNCTIONS_ARTIFACT_NAME }}
          path: ${{ env.FUNCTIONS_PUBLISH_DIRECTORY }}

  # Deploy infrastructure job
  deploy_infra:
    name: Deploy infrastructure
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    environment: demo-backend
    permissions:
      id-token: write
      contents: read
    outputs:
      appServiceName: ${{ steps.deploy_bicep.outputs.appServiceName }}
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy Bicep template
      - name: Deploy Bicep template
        uses: azure/arm-deploy@v1
        id: deploy_bicep
        with:
          scope: resourcegroup
          resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
          deploymentName: main-cicd-backend-${{ github.run_number }}
          template: ${{ github.workspace }}/infra/main.bicep
          parameters: ${{ github.workspace }}/infra/main.bicepparam

  # Deploy API application job
  deploy_api_app:
    name: Deploy API application
    runs-on: ubuntu-latest
    needs:
      - build
      - deploy_infra
    permissions:
      id-token: write
      contents: read
    environment: demo-backend
    env:
      ARTIFACT_DIRECTORY: ${{ github.workspace }}/artifact
    steps:
      # Download API artifact
      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_DIRECTORY }}

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy to App Service
      - name: Deploy to App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.deploy_infra.outputs.appServiceName }}
          package: ${{ env.ARTIFACT_DIRECTORY }}

  # Deploy Functions application
  deploy_functions_app:
    name: Deploy Functions application
    runs-on: ubuntu-latest
    needs:
      - build
      - deploy_infra
    environment: demo-backend
    env:
      APP_PATH: ${{ github.workspace }}/app
    steps:
      # Download application artifact
      - name: Download application artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.FUNCTIONS_ARTIFACT_NAME }}
          path: ${{ env.APP_PATH }}

      # Publish functions application
      - name: Publish functions application
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ vars.FUNCTIONS_APP_NAME }}
          package: ${{ env.APP_PATH }}
          publish-profile: ${{ secrets.AZURE_FUNCTIONS_PUBLISH_PROFILE }}
