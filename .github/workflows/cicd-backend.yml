name: CI/CD Backend

on:
  push:
    branches:
      - main
      - feature/container-apps-deploy-refactor # // TODO: Remove this line after testing
    paths:
      - .github/workflows/cicd-backend.yml
      - backend/**

  # pull_request:
  #   branches:
  #     - main
  #   paths:
  #     - .github/workflows/cicd-backend.yml
  #     - backend/**

env:
  API_ARTIFACT_NAME: adoptrix-api
  JOBS_ARTIFACT_NAME: jobs

jobs:
  # Build, test and publish API job
  build:
    name: Build and test
    runs-on: ubuntu-latest
    env:
      BACKEND_DIRECTORY: ${{ github.workspace }}/backend
      BUILD_CONFIGURATION: Release
      API_IMAGE_PATH: ${{ github.workspace }}/adoptrix-api.tar
      JOBS_PUBLISH_DIRECTORY: ${{ github.workspace }}/artifacts/jobs
      TEST_RESULTS_DIRECTORY: ${{ github.workspace }}/artifacts/test-results
    permissions:
      checks: write
      pull-requests: write
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Restore NuGet packages
      - name: Restore packages
        run: dotnet restore
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Build solution
      - name: Build solution
        run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Run tests
      - name: Run tests
        run: >-
          dotnet test
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --logger trx
          --collect "XPlat Code Coverage"
          --settings ${{ env.BACKEND_DIRECTORY }}/coverlet.runsettings
          --results-directory ${{ env.TEST_RESULTS_DIRECTORY }}
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Publish test results
      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: ${{ env.TEST_RESULTS_DIRECTORY }}/*.trx
          check_name: Solution test results
          action_fail: true

      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ env.TEST_RESULTS_DIRECTORY }}

      # Upload coverage reports
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      # Publish API project
      - name: Publish API project
        if: github.event_name != 'pull_request'
        run: >-
          dotnet publish
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --output publish
        working-directory: ${{ env.BACKEND_DIRECTORY }}/src/Adoptrix.Api

      # Calculate tag version
      - name: Calculate tag version
        uses: anothrNick/github-tag-action@1.67.0
        id: calculate_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DRY_RUN: true

      # Build and save API image
      - name: Build and save API image
        if: github.event_name != 'pull_request'
        id: build-api-image
        env:
          IMAGE_TAG: ${{ vars.ACR_NAME }}.azurecr.io/${{ vars.API_IMAGE_NAME }}:${{ steps.calculate_version.outputs.new_tag }}
        run: |
          docker build --tag ${{ env.IMAGE_TAG }} .
          docker save --output ${{ env.API_IMAGE_PATH }} ${{ env.IMAGE_TAG }}
          echo "imageTag=${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"
        working-directory: ${{ env.BACKEND_DIRECTORY }}/src/Adoptrix.Api

      # Upload API artifact
      - name: Upload API artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}
          path: ${{ env.API_IMAGE_PATH }}

      # Publish jobs project
      - name: Publish jobs project
        if: github.event_name != 'pull_request'
        run: >-
          dotnet publish ${{ env.BACKEND_DIRECTORY }}/src/Adoptrix.Jobs
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --output ${{ env.JOBS_PUBLISH_DIRECTORY }}
        working-directory: ${{ env.BACKEND_DIRECTORY }}

      # Upload jobs artifact
      - name: Upload jobs artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.JOBS_ARTIFACT_NAME }}
          path: ${{ env.JOBS_PUBLISH_DIRECTORY }}/*
    outputs:
      imageTag: ${{ steps.build-api-image.outputs.imageTag }}

  # Deploy API application job
  deploy_api_app:
    name: Deploy API application
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read
    environment: demo
    steps:
      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # Authenticate with Azure Container Registry
      - name: Authenticate with ACR
        run: az acr login --name ${{ vars.ACR_NAME }}

      # Download artifact
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}

      # Load Docker image
      - name: Load Docker image
        run: docker load --input ${{ steps.download-artifact.outputs.download-path }}/adoptrix-api.tar

      # Push images to ACR
      - name: Push images to ACR
        env:
          LATEST_IMAGE_TAG: ${{ vars.ACR_NAME }}.azurecr.io/${{ vars.API_IMAGE_NAME }}:latest
        run: |
          docker tag ${{ needs.build.outputs.imageTag }} ${{ env.LATEST_IMAGE_TAG }}
          docker push --all-tags ${{ vars.ACR_NAME }}.azurecr.io/${{ vars.API_IMAGE_NAME }}

      # Deploy Container App
      - name: Deploy Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          acrName: ${{ vars.ACR_NAME }}
          imageToDeploy: ${{ needs.build.outputs.imageTag }}
          containerAppName: adoptrix-demo-api-ca
          resourceGroup: ${{ vars.AZURE_RESOURCE_GROUP }}

  # Deploy jobs application
  deploy_jobs_app:
    name: Deploy jobs application
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    environment: demo
    steps:
      # Download artifact
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.JOBS_ARTIFACT_NAME }}

      # Publish application
      - name: Publish application
        uses: Azure/functions-action@v1
        with:
          app-name: adoptrix-demo-jobs-func
          package: ${{ steps.download-artifact.outputs.download-path }}
          publish-profile: ${{ secrets.JOBS_PUBLISH_PROFILE }}
