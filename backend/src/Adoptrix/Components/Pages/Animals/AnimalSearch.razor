@page "/animals"
@using Adoptrix.Application.Features.Animals.Queries
@using Adoptrix.Application.Features.Animals.Responses
@using MediatR
@inject AppNameProvider AppNameProvider
@inject ISender Sender;

<PageTitle>Animals - @AppNameProvider.AppName</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Search Animals</MudText>

@if (results == null)
{
    <MudProgressCircular Indeterminate="true"/>
}
else
{
    <MudContainer Fixed="true" Class="d-flex flex-wrap justify-center gap-2">
        @foreach (var result in results)
        {
            <MudCard Style="width: 240px">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@result.Name</MudText>
                        <MudText Typo="Typo.subtitle1">@result.BreedName</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardMedia Height="240" Image="@GetPreviewImageUrl(result)"/>
                <MudCardActions>
                    <MudButton Href="@GetDetailsUrl(result)">View Details</MudButton>
                    <MudSpacer></MudSpacer>
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite"/>
                </MudCardActions>
            </MudCard>
        }
    </MudContainer>
}


@code {
    private IEnumerable<SearchAnimalsResult>? results;

    protected override async Task OnInitializedAsync()
    {
        results = await Sender.Send(new SearchAnimalsQuery(
            null, null, null, null, null));
    }

    private static string GetDetailsUrl(SearchAnimalsResult result)
    {
        return $"/animals/{result.Id}";
    }

    private static string GetPreviewImageUrl(SearchAnimalsResult result)
    {
        return result.Image?.PreviewUrl ?? string.Empty;
    }

}
